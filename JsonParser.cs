//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Json.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace simple_json {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class JsonParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		INT=10, FLOAT=11, STR=12, SPACE=13;
	public const int
		RULE_start = 0, RULE_jsonpair = 1, RULE_seplist_of_comma_and_json = 2, 
		RULE_seplist_of_comma_and_json_pair = 3, RULE_json = 4;
	public static readonly string[] ruleNames = {
		"start", "jsonpair", "seplist_of_comma_and_json", "seplist_of_comma_and_json_pair", 
		"json"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "','", "'null'", "'['", "']'", "'{'", "'}'", "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "INT", "FLOAT", 
		"STR", "SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Json.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JsonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JsonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JsonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		public JsonValue result;
		public JsonContext var_0__1;
		[System.Diagnostics.DebuggerNonUserCode] public JsonContext json() {
			return GetRuleContext<JsonContext>(0);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJsonListener typedListener = listener as IJsonListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJsonListener typedListener = listener as IJsonListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10;
			_localctx.var_0__1 = json();
			 _localctx.result =  _localctx.var_0__1.result; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonpairContext : ParserRuleContext {
		public JsonPair result;
		public IToken var_0__1;
		public JsonContext var_0__3;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(JsonParser.STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonContext json() {
			return GetRuleContext<JsonContext>(0);
		}
		public JsonpairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonpair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJsonListener typedListener = listener as IJsonListener;
			if (typedListener != null) typedListener.EnterJsonpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJsonListener typedListener = listener as IJsonListener;
			if (typedListener != null) typedListener.ExitJsonpair(this);
		}
	}

	[RuleVersion(0)]
	public JsonpairContext jsonpair() {
		JsonpairContext _localctx = new JsonpairContext(Context, State);
		EnterRule(_localctx, 2, RULE_jsonpair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			_localctx.var_0__1 = Match(STR);
			State = 14;
			Match(T__0);
			State = 15;
			_localctx.var_0__3 = json();
			 _localctx.result =  new JsonPair(unesc(getStr(_localctx.var_0__1)), _localctx.var_0__3.result); 
					
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Seplist_of_comma_and_jsonContext : ParserRuleContext {
		public List<JsonValue> result;
		public Seplist_of_comma_and_jsonContext var_1__1;
		public JsonContext var_0__1;
		public JsonContext var_1__3;
		[System.Diagnostics.DebuggerNonUserCode] public JsonContext json() {
			return GetRuleContext<JsonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Seplist_of_comma_and_jsonContext seplist_of_comma_and_json() {
			return GetRuleContext<Seplist_of_comma_and_jsonContext>(0);
		}
		public Seplist_of_comma_and_jsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seplist_of_comma_and_json; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJsonListener typedListener = listener as IJsonListener;
			if (typedListener != null) typedListener.EnterSeplist_of_comma_and_json(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJsonListener typedListener = listener as IJsonListener;
			if (typedListener != null) typedListener.ExitSeplist_of_comma_and_json(this);
		}
	}

	[RuleVersion(0)]
	public Seplist_of_comma_and_jsonContext seplist_of_comma_and_json() {
		return seplist_of_comma_and_json(0);
	}

	private Seplist_of_comma_and_jsonContext seplist_of_comma_and_json(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Seplist_of_comma_and_jsonContext _localctx = new Seplist_of_comma_and_jsonContext(Context, _parentState);
		Seplist_of_comma_and_jsonContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_seplist_of_comma_and_json, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 19;
			_localctx.var_0__1 = json();
			 _localctx.result =  new List<JsonValue> { _localctx.var_0__1.result }; 
			}
			Context.Stop = TokenStream.LT(-1);
			State = 29;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Seplist_of_comma_and_jsonContext(_parentctx, _parentState);
					_localctx.var_1__1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_seplist_of_comma_and_json);
					State = 22;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 23;
					Match(T__1);
					State = 24;
					_localctx.var_1__3 = json();
					 
					                          _localctx.var_1__1.result.Add(_localctx.var_1__3.result);
					                          _localctx.result =  _localctx.var_1__1.result;
					                      
					}
					} 
				}
				State = 31;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Seplist_of_comma_and_json_pairContext : ParserRuleContext {
		public List<JsonPair> result;
		public Seplist_of_comma_and_json_pairContext var_1__1;
		public JsonpairContext var_0__1;
		public JsonpairContext var_1__3;
		[System.Diagnostics.DebuggerNonUserCode] public JsonpairContext jsonpair() {
			return GetRuleContext<JsonpairContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Seplist_of_comma_and_json_pairContext seplist_of_comma_and_json_pair() {
			return GetRuleContext<Seplist_of_comma_and_json_pairContext>(0);
		}
		public Seplist_of_comma_and_json_pairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seplist_of_comma_and_json_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJsonListener typedListener = listener as IJsonListener;
			if (typedListener != null) typedListener.EnterSeplist_of_comma_and_json_pair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJsonListener typedListener = listener as IJsonListener;
			if (typedListener != null) typedListener.ExitSeplist_of_comma_and_json_pair(this);
		}
	}

	[RuleVersion(0)]
	public Seplist_of_comma_and_json_pairContext seplist_of_comma_and_json_pair() {
		return seplist_of_comma_and_json_pair(0);
	}

	private Seplist_of_comma_and_json_pairContext seplist_of_comma_and_json_pair(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Seplist_of_comma_and_json_pairContext _localctx = new Seplist_of_comma_and_json_pairContext(Context, _parentState);
		Seplist_of_comma_and_json_pairContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_seplist_of_comma_and_json_pair, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 33;
			_localctx.var_0__1 = jsonpair();
			  _localctx.result =  new List<JsonPair> { _localctx.var_0__1.result };
			            
			}
			Context.Stop = TokenStream.LT(-1);
			State = 43;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Seplist_of_comma_and_json_pairContext(_parentctx, _parentState);
					_localctx.var_1__1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_seplist_of_comma_and_json_pair);
					State = 36;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 37;
					Match(T__1);
					State = 38;
					_localctx.var_1__3 = jsonpair();
					 
					                          _localctx.var_1__1.result.Add(_localctx.var_1__3.result);
					                          _localctx.result =  _localctx.var_1__1.result;
					                      
					}
					} 
				}
				State = 45;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class JsonContext : ParserRuleContext {
		public JsonValue result;
		public IToken var_0__1;
		public IToken var_1__1;
		public IToken var_3__1;
		public Seplist_of_comma_and_jsonContext var_8__2;
		public Seplist_of_comma_and_json_pairContext var_9__2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(JsonParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(JsonParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR() { return GetToken(JsonParser.STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Seplist_of_comma_and_jsonContext seplist_of_comma_and_json() {
			return GetRuleContext<Seplist_of_comma_and_jsonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Seplist_of_comma_and_json_pairContext seplist_of_comma_and_json_pair() {
			return GetRuleContext<Seplist_of_comma_and_json_pairContext>(0);
		}
		public JsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJsonListener typedListener = listener as IJsonListener;
			if (typedListener != null) typedListener.EnterJson(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJsonListener typedListener = listener as IJsonListener;
			if (typedListener != null) typedListener.ExitJson(this);
		}
	}

	[RuleVersion(0)]
	public JsonContext json() {
		JsonContext _localctx = new JsonContext(Context, State);
		EnterRule(_localctx, 8, RULE_json);
		try {
			State = 74;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46;
				_localctx.var_0__1 = Match(INT);
				 _localctx.result =  new JInt(parseInt(getStr(_localctx.var_0__1))); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 48;
				_localctx.var_1__1 = Match(FLOAT);
				 _localctx.result =  new JFlt(parseFlt(getStr(_localctx.var_1__1))); 
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 50;
				Match(T__2);
				 _localctx.result =  new JNull(); 
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 52;
				_localctx.var_3__1 = Match(STR);
				 _localctx.result =  new JStr(unesc(getStr(_localctx.var_3__1))); 
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 54;
				Match(T__3);
				State = 55;
				Match(T__4);
				 _localctx.result =  new JList(new List<JsonValue> {  }); 
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 57;
				Match(T__5);
				State = 58;
				Match(T__6);
				 _localctx.result =  new JDict(new List<JsonPair> {  }); 
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 60;
				Match(T__7);
				 _localctx.result =  new JBool(true); 
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 62;
				Match(T__8);
				 _localctx.result =  new JBool(false); 
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 64;
				Match(T__3);
				State = 65;
				_localctx.var_8__2 = seplist_of_comma_and_json(0);
				State = 66;
				Match(T__4);
				 _localctx.result =  new JList(_localctx.var_8__2.result); 
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 69;
				Match(T__5);
				State = 70;
				_localctx.var_9__2 = seplist_of_comma_and_json_pair(0);
				State = 71;
				Match(T__6);
				 _localctx.result =  new JDict(_localctx.var_9__2.result); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return seplist_of_comma_and_json_sempred((Seplist_of_comma_and_jsonContext)_localctx, predIndex);
		case 3: return seplist_of_comma_and_json_pair_sempred((Seplist_of_comma_and_json_pairContext)_localctx, predIndex);
		}
		return true;
	}
	private bool seplist_of_comma_and_json_sempred(Seplist_of_comma_and_jsonContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool seplist_of_comma_and_json_pair_sempred(Seplist_of_comma_and_json_pairContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xF', 'O', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x1E', '\n', '\x4', 
		'\f', '\x4', '\xE', '\x4', '!', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', ',', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', '/', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', 'M', '\n', '\x6', '\x3', '\x6', '\x2', '\x4', '\x6', '\b', 
		'\a', '\x2', '\x4', '\x6', '\b', '\n', '\x2', '\x2', '\x2', 'T', '\x2', 
		'\f', '\x3', '\x2', '\x2', '\x2', '\x4', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x14', '\x3', '\x2', '\x2', '\x2', '\b', '\"', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'L', '\x3', '\x2', '\x2', '\x2', '\f', '\r', '\x5', '\n', 
		'\x6', '\x2', '\r', '\xE', '\b', '\x2', '\x1', '\x2', '\xE', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\xF', '\x10', '\a', '\xE', '\x2', '\x2', '\x10', 
		'\x11', '\a', '\x3', '\x2', '\x2', '\x11', '\x12', '\x5', '\n', '\x6', 
		'\x2', '\x12', '\x13', '\b', '\x3', '\x1', '\x2', '\x13', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x15', '\b', '\x4', '\x1', '\x2', '\x15', 
		'\x16', '\x5', '\n', '\x6', '\x2', '\x16', '\x17', '\b', '\x4', '\x1', 
		'\x2', '\x17', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\f', 
		'\x3', '\x2', '\x2', '\x19', '\x1A', '\a', '\x4', '\x2', '\x2', '\x1A', 
		'\x1B', '\x5', '\n', '\x6', '\x2', '\x1B', '\x1C', '\b', '\x4', '\x1', 
		'\x2', '\x1C', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x18', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '!', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\a', '\x3', '\x2', '\x2', '\x2', '!', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\"', '#', '\b', '\x5', '\x1', '\x2', '#', '$', '\x5', '\x4', 
		'\x3', '\x2', '$', '%', '\b', '\x5', '\x1', '\x2', '%', '-', '\x3', '\x2', 
		'\x2', '\x2', '&', '\'', '\f', '\x3', '\x2', '\x2', '\'', '(', '\a', '\x4', 
		'\x2', '\x2', '(', ')', '\x5', '\x4', '\x3', '\x2', ')', '*', '\b', '\x5', 
		'\x1', '\x2', '*', ',', '\x3', '\x2', '\x2', '\x2', '+', '&', '\x3', '\x2', 
		'\x2', '\x2', ',', '/', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3', '\x2', 
		'\x2', '\x2', '-', '.', '\x3', '\x2', '\x2', '\x2', '.', '\t', '\x3', 
		'\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', 
		'\a', '\f', '\x2', '\x2', '\x31', 'M', '\b', '\x6', '\x1', '\x2', '\x32', 
		'\x33', '\a', '\r', '\x2', '\x2', '\x33', 'M', '\b', '\x6', '\x1', '\x2', 
		'\x34', '\x35', '\a', '\x5', '\x2', '\x2', '\x35', 'M', '\b', '\x6', '\x1', 
		'\x2', '\x36', '\x37', '\a', '\xE', '\x2', '\x2', '\x37', 'M', '\b', '\x6', 
		'\x1', '\x2', '\x38', '\x39', '\a', '\x6', '\x2', '\x2', '\x39', ':', 
		'\a', '\a', '\x2', '\x2', ':', 'M', '\b', '\x6', '\x1', '\x2', ';', '<', 
		'\a', '\b', '\x2', '\x2', '<', '=', '\a', '\t', '\x2', '\x2', '=', 'M', 
		'\b', '\x6', '\x1', '\x2', '>', '?', '\a', '\n', '\x2', '\x2', '?', 'M', 
		'\b', '\x6', '\x1', '\x2', '@', '\x41', '\a', '\v', '\x2', '\x2', '\x41', 
		'M', '\b', '\x6', '\x1', '\x2', '\x42', '\x43', '\a', '\x6', '\x2', '\x2', 
		'\x43', '\x44', '\x5', '\x6', '\x4', '\x2', '\x44', '\x45', '\a', '\a', 
		'\x2', '\x2', '\x45', '\x46', '\b', '\x6', '\x1', '\x2', '\x46', 'M', 
		'\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', '\b', '\x2', '\x2', 'H', 'I', 
		'\x5', '\b', '\x5', '\x2', 'I', 'J', '\a', '\t', '\x2', '\x2', 'J', 'K', 
		'\b', '\x6', '\x1', '\x2', 'K', 'M', '\x3', '\x2', '\x2', '\x2', 'L', 
		'\x30', '\x3', '\x2', '\x2', '\x2', 'L', '\x32', '\x3', '\x2', '\x2', 
		'\x2', 'L', '\x34', '\x3', '\x2', '\x2', '\x2', 'L', '\x36', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x38', '\x3', '\x2', '\x2', '\x2', 'L', ';', '\x3', 
		'\x2', '\x2', '\x2', 'L', '>', '\x3', '\x2', '\x2', '\x2', 'L', '@', '\x3', 
		'\x2', '\x2', '\x2', 'L', '\x42', '\x3', '\x2', '\x2', '\x2', 'L', 'G', 
		'\x3', '\x2', '\x2', '\x2', 'M', '\v', '\x3', '\x2', '\x2', '\x2', '\x5', 
		'\x1F', '-', 'L',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace simple_json
